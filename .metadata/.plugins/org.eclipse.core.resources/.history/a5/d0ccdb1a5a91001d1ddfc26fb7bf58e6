

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
   
   
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, VOID, SEMI, EQUAL, COMMA, CONST, LSQUARES, RSQUARES, EXTENDS, CLASS;
terminal LPAREN, RPAREN, READ, PRINT, WHILE, BREAK, CONTINUE, RETURN, NEW, DOT;
terminal Integer NUMBER;
terminal String IDENT;
terminal String BOOL;
terminal String CHAR;
terminal IF, ELSE, INC, DEC, PLUS, MINUS, AND, OR, GREATER, LESS, IFEQUAL, NOTEQUAL, GREATEREQUAL, LESSEQUAL, MUL, DIV, PERCENT;
terminal THIS, ENUM, FOREACH, DO, ARROW, DOUBLEDOT;

nonterminal ConstDeclList, VarDeclList, ClassDeclList, MethodDeclList, Mulop, Addop;
nonterminal ConstTypeList, ConstDecl, VarDecl, VarMultiple, ClassDecl, Label;
nonterminal FormParsList, FormParsMultiple, FormPars, StatementList, Statement, Matched, Unmatched;
nonterminal Condition, DesignatorStatement, DesignatorStmtMore, DesignatorNot, FirstDesignatorPart;
nonterminal Assignop, ActPars, ActParsMore, ConditionMore, CondTerm, CondFactMore, CondFact, Relop;
nonterminal DesiActPars;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodType, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Factor, Term, Expr, MulopFactor, AddopTermList, ConstType, VarSquares;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p ConstDeclList VarDeclList ClassDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

ConstDeclList ::= (ConstList) ConstDeclList ConstDecl
				|
				(NoConstList) /* epsilon */
				;
				
				
ConstTypeList ::= (MultipleConstTypes) ConstTypeList COMMA IDENT:someConst EQUAL ConstType:symConst
				|
				(OneConstType) COMMA IDENT:someConst EQUAL ConstType:symConst
				;
				
ConstDecl ::= (MoreConstDecl) CONST Type:constType IDENT:someConst EQUAL ConstType:symConst ConstTypeList SEMI
			|
			(ConstDeclOneTime) CONST Type:constType IDENT:someConst EQUAL ConstType:symConst SEMI
			;				
				 				
ConstType ::= (NumConst) NUMBER:constType
			|
			(CharConst) CHAR:constType
			|
			(BoolConst) BOOL:constType
			;

VarDeclList ::= (VarList) VarDeclList VarDecl
			|
			(NoVarList) /* epsilon */
			;

VarDecl ::= (MoreVarDecl) Type:varType IDENT:varDecName VarSquares:varSquares VarMultiple SEMI
		|
		(VarError) error SEMI:s
		{: parser.report_error("Izvrsen oporavak do ; u liniji " + sleft, null);  :}
		|
		(VarDeclOneTime) Type:varType IDENT:varDecName VarSquares:varSquares SEMI
		;

VarMultiple ::= (MultipleVars) VarMultiple COMMA IDENT:varName VarSquares:varSquares
			|
			(OneVar) COMMA IDENT:varName VarSquares:varSquares
			|
			(CommaVarError) error COMMA:c
			{: parser.report_error("Izvrsen oporavak do , u liniji " + cleft, null);  :}
			;

VarSquares ::= (VarSquares) LSQUARES RSQUARES
			| 
			(NoSquares) /* epsilon */
			;

ClassDeclList ::= (ClassList) ClassDeclList ClassDecl
				|
				(NoClassList) /* epsilon */
				;


ClassDecl ::= (ClassDeclNoExtend) CLASS IDENT:className LBRACE VarDeclList LBRACE MethodDeclList RBRACE RBRACE
			|
			(ClassDeclExtends)  CLASS IDENT:className EXTENDS Type:typeType LBRACE VarDeclList LBRACE MethodDeclList RBRACE RBRACE
			;

MethodDeclList ::= (MethodList) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;

MethodDecl ::= 	(MethodDecl) MethodType LPAREN FormParsList RPAREN VarDeclList LBRACE StatementList RBRACE;

MethodType ::= (MethTypeVoid) VOID:methType IDENT:methName
			|
			(MethTypeOther) Type:methType IDENT:methName
			;

FormParsList ::= (FormParsListItem) FormPars
				|
				(NoFormParsList) /* epsilon */
				;

FormParsMultiple ::= (MultipleFormPars) FormParsMultiple COMMA Type:formType IDENT:formIdent VarSquares
				|
				(OneFormParsMultiple) COMMA Type:formType IDENT:formIdent VarSquares
				; 

FormPars ::= (MoreFormPars) Type:formParsType IDENT:formParsIdent VarSquares SEMI
			|
			(OneFormPars) Type:formParsType IDENT:formParsIdent VarSquares FormParsMultiple SEMI
			;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;	
			
Statement ::= (MatchedStmt) Matched
		   |
		   (UnmatchedStmt) Unmatched
		   ;
		   
Unmatched ::= (UnmatchedIf) IF LPAREN Condition RPAREN Statement:stmt
		 	|
		 	(UnmatchedIfElse) IF LPAREN Condition RPAREN Matched ELSE Unmatched
		 	;		   

Matched ::= (DesStatement) DesignatorStatement SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (WhileCondition) WHILE LPAREN Condition RPAREN Statement:stm
		   |
		   (BreakCondition) BREAK SEMI
		   |
		   (ContinueCondition) CONTINUE SEMI
		   |
		   (ReturnNothing) RETURN SEMI
		   |
		   (ReturnCondition) RETURN Expr:t SEMI
		   |
		   (ReadCondition) READ LPAREN Designator RPAREN SEMI
		   |
		   (PrintCondition) PRINT LPAREN Expr RPAREN SEMI
		   |
		   (MorePrintCondition) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
		   |
		   (StatementCondition) LBRACE StatementList RBRACE
		   |
		   (MatchedStatement) IF LPAREN Condition RPAREN Matched ELSE Matched 
		   ;

DesignatorStatement ::= (DesignatorParsStmt) Designator FirstDesignatorPart
					|
					(DesignatorSquareStmt) LSQUARES DesignatorNot RSQUARES EQUAL Designator
					|
					(MoreDesignatorSquare) LSQUARES DesignatorNot DesignatorStmtMore RSQUARES EQUAL Designator
					;
					
DesignatorStmtMore ::= (OneDesStmt) COMMA DesignatorNot
					|
					(MoreDesStmt) DesignatorStmtMore COMMA DesignatorNot
					; 					
					
DesignatorNot ::= (DesignatorYes) Designator
				|
				(DesignatorNo) /* epsilon */
				;


FirstDesignatorPart ::= (AssignopExpr) Assignop Expr
					|
					(ActParsDes) LPAREN DesiActPars RPAREN
					|
					(Increment) INC
					|
					(Decrement) DEC
					;
					
DesiActPars ::= (DesiActPar) ActPars
			|
			(NoDesiAct) /* epsilon */
			;

ActPars ::= (OneExprActPars) Expr
		|
		(MoreExprActPars) Expr ActParsMore
		;
		
ActParsMore ::= (OneActParsMore) COMMA Expr
			|
			(MoreActParsMore) ActParsMore COMMA Expr
			;

Type ::= (Type) IDENT:typeName;

Condition ::= (OneConditon) CondTerm
			|
			(MoreConditions) CondTerm ConditionMore
			;

ConditionMore ::= (OneMoreCondition) OR CondTerm
				|
				(MoreConditionMore) ConditionMore OR CondTerm
				;
				
CondTerm ::= (OneCondFact) CondFact
			|
			(MoreCondFact) CondFact CondFactMore
			;
			
CondFactMore ::= (OneCondFactMore) AND CondFact
			|
			(MoreCondFactMore) CondFactMore AND CondFact
			;

CondFact ::= (CondFactExpr) Expr
		|
		(CondFactRelop) Expr Relop Expr
		;
		
Expr ::= (PositiveExpr) AddopTermList
		|
		(NegativeExpr) MINUS AddopTermList
		;		
		
AddopTermList ::= (FirstExpr) Term
			|
			(NextExpr) AddopTermList Addop Term
			;		

Term ::= (TermOne) Factor:factor
		|
		(TermMore) Term:termName Mulop Factor:factorName
		;

Factor ::= (FactorDesAct) Designator:func LPAREN DesiActPars RPAREN
		|
		(FactorDesNoAct) Designator:d
		|
		(FactorNumber) NUMBER
		|
		(FactorChar) CHAR
		|
		(FactorBool) BOOL
		|
		(FactorExpr) LPAREN Expr RPAREN
		|
		(FactorNewTypeExpr) NEW Type LSQUARES Expr RSQUARES
		|
		(FactorNewTypeActPars) NEW Type LPAREN ActPars RPAREN
		|
		(FactorNewTypeNoAct) NEW Type LPAREN RPAREN
		;
				 	
		
Designator ::= (OneDesignatorIdent) IDENT:designatorName
			|
			(DesignatorWithExpr) Designator LSQUARES Expr RSQUARES
			|
			(DesignatorWithIdent) Designator DOT IDENT:designatorName
			;
Label ::= (LabelItem) IDENT:labelName;
		   
Assignop ::= (AssignopItem) EQUAL;

Relop ::= (Ifequal) IFEQUAL
		|
		(Notequal) NOTEQUAL
		|
		(Greater) GREATER
		|
		(Less) LESS
		|
		(Greaterequal) GREATEREQUAL
		|
		(Lessequal) LESSEQUAL
		;
		
Addop ::= (AddopItem) PLUS
		|
		(Subop) MINUS
		;
		
Mulop ::= (MulopItem) MUL
		|
		(Divop) DIV
		|
		(Modop) PERCENT
		;							
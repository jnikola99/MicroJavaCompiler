

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
   
   
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, VOID, SEMI, EQUAL, COMMA, CONST, LSQUARES, RSQUARES, EXTENDS, CLASS;
terminal LPAREN, RPAREN, READ, PRINT, WHILE, BREAK, CONTINUE, RETURN, NEW, DOT;
terminal Integer NUMBER;
terminal String IDENT;
terminal String BOOL;
terminal String CHAR;
terminal IF, ELSE, INC, DEC, PLUS, MINUS, AND, OR, GREATER, LESS, IFEQUAL, NOTEQUAL, GREATEREQUAL, LESSEQUAL, MUL, DIV, PERCENT;
terminal THIS, ENUM, FOREACH, DO, ARROW, DOUBLEDOT;

nonterminal ConstDeclList ConstDeclList;
nonterminal VarDeclList VarDeclList;
nonterminal ClassDeclList ClassDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal Mulop Mulop;
nonterminal Addop Addop;
nonterminal ConstTypeList ConstTypeList;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal VarMultiple VarMultiple;
nonterminal ClassDecl ClassDecl;
nonterminal Label Label;
nonterminal FormParsList FormParsList;
nonterminal FormParsMultiple FormParsMultiple;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal Condition Condition;
nonterminal Assignop Assignop;
nonterminal ActPars ActPars;
nonterminal ActParsMore ActParsMore;
nonterminal ConditionMore ConditionMore;
nonterminal CondTerm CondTerm;
nonterminal CondFactMore CondFactMore;
nonterminal CondFact CondFact;
nonterminal Relop Relop;
nonterminal DesiActPars DesiActPars;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodType, Designator, DesignatorStatement, DesignatorStmtMore, DesignatorNot;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Factor, Term, Expr, MulopFactor, AddopTermList, ConstType, VarSquares;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p ConstDeclList:C1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, C1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

ConstDeclList ::= (ConstList) ConstDeclList:C1 ConstDecl:C2 {: RESULT=new ConstList(C1, C2); RESULT.setLine(C1left); :}
				|
				(VarDecList) ConstDeclList:C1 VarDecl:V2 {: RESULT=new VarDecList(C1, V2); RESULT.setLine(C1left); :}
				|
				(NoConstList) {: RESULT=new NoConstList(); :} /* epsilon */
				;
				
				
ConstTypeList ::= (MultipleConstTypes) ConstTypeList:C1 COMMA IDENT:someConst EQUAL ConstType:symConst {: RESULT=new MultipleConstTypes(C1, someConst, symConst); RESULT.setLine(C1left); :}
				|
				(OneConstType) COMMA IDENT:someConst EQUAL ConstType:symConst {: RESULT=new OneConstType(someConst, symConst); RESULT.setLine(someConstleft); :}
				;
				
ConstDecl ::= (MoreConstDecl) CONST Type:constType IDENT:someConst EQUAL ConstType:symConst ConstTypeList:C1 SEMI {: RESULT=new MoreConstDecl(constType, someConst, symConst, C1); RESULT.setLine(constTypeleft); :}
			|
			(ConstDeclOneTime) CONST Type:constType IDENT:someConst EQUAL ConstType:symConst SEMI {: RESULT=new ConstDeclOneTime(constType, someConst, symConst); RESULT.setLine(constTypeleft); :}
			;				
				 				
ConstType ::= (NumConst) NUMBER:constType {: RESULT=new NumConst(constType); RESULT.setLine(constTypeleft); :}
			|
			(CharConst) CHAR:constType {: RESULT=new CharConst(constType); RESULT.setLine(constTypeleft); :}
			|
			(BoolConst) BOOL:constType {: RESULT=new BoolConst(constType); RESULT.setLine(constTypeleft); :}
			;

VarDeclList ::= (VarList) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarList(V1, V2); RESULT.setLine(V1left); :}
			|
			(NoVarList) {: RESULT=new NoVarList(); :} /* epsilon */
			;

VarDecl ::= (MoreVarDecl) Type:varType IDENT:varDecName VarSquares:varSquares VarMultiple:V1 SEMI {: RESULT=new MoreVarDecl(varType, varDecName, varSquares, V1); RESULT.setLine(varTypeleft); :}
		|
		(VarError) error SEMI:s
		{: parser.report_error("Izvrsen oporavak do ; u liniji " + sleft, null);  :} {: RESULT=new VarError(); :}
		|
		(VarDeclOneTime) Type:varType IDENT:varDecName VarSquares:varSquares SEMI {: RESULT=new VarDeclOneTime(varType, varDecName, varSquares); RESULT.setLine(varTypeleft); :}
		;

VarMultiple ::= (MultipleVars) VarMultiple:V1 COMMA IDENT:varName VarSquares:varSquares {: RESULT=new MultipleVars(V1, varName, varSquares); RESULT.setLine(V1left); :}
			|
			(OneVar) COMMA IDENT:varName VarSquares:varSquares {: RESULT=new OneVar(varName, varSquares); RESULT.setLine(varNameleft); :}
			|
			(CommaVarError) error COMMA:c
			{: parser.report_error("Izvrsen oporavak do , u liniji " + cleft, null);  :} {: RESULT=new CommaVarError(); :}
			;

VarSquares ::= (VarSquares) LSQUARES RSQUARES {: RESULT=new VarSquares(); :}
			| 
			(NoSquares) {: RESULT=new NoSquares(); :} /* epsilon */
			;

ClassDeclList ::= (ClassList) ClassDeclList:C1 ClassDecl:C2 {: RESULT=new ClassList(C1, C2); RESULT.setLine(C1left); :}
				|
				(NoClassList) {: RESULT=new NoClassList(); :} /* epsilon */
				;


ClassDecl ::= (ClassDeclNoExtend) CLASS IDENT:className LBRACE VarDeclList:V1 LBRACE MethodDeclList:M2 RBRACE RBRACE {: RESULT=new ClassDeclNoExtend(className, V1, M2); RESULT.setLine(classNameleft); :}
			|
			(ClassDeclExtends)  CLASS IDENT:className EXTENDS Type:typeType LBRACE VarDeclList:V1 LBRACE MethodDeclList:M2 RBRACE RBRACE {: RESULT=new ClassDeclExtends(className, typeType, V1, M2); RESULT.setLine(classNameleft); :}
			;

MethodDeclList ::= (MethodList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodList(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;

MethodDecl ::= 	(MethodDecl) MethodType:M1 LPAREN FormParsList:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :};

MethodType ::= (MethTypeVoid) VOID:methType IDENT:methName {: RESULT=new MethTypeVoid(methName); RESULT.setLine(methNameleft); :}
			|
			(MethTypeOther) Type:methType IDENT:methName {: RESULT=new MethTypeOther(methType, methName); RESULT.setLine(methTypeleft); :}
			;

FormParsList ::= (FormParsListItem) FormPars:F1 {: RESULT=new FormParsListItem(F1); RESULT.setLine(F1left); :}
				|
				(NoFormParsList) {: RESULT=new NoFormParsList(); :} /* epsilon */
				;

FormParsMultiple ::= (MultipleFormPars) FormParsMultiple:F1 COMMA Type:formType IDENT:formIdent VarSquares:V2 {: RESULT=new MultipleFormPars(F1, formType, formIdent, V2); RESULT.setLine(F1left); :}
				|
				(OneFormParsMultiple) COMMA Type:formType IDENT:formIdent VarSquares:V1 {: RESULT=new OneFormParsMultiple(formType, formIdent, V1); RESULT.setLine(formTypeleft); :}
				; 

FormPars ::= (MoreFormPars) Type:formParsType IDENT:formParsIdent VarSquares:V1 SEMI {: RESULT=new MoreFormPars(formParsType, formParsIdent, V1); RESULT.setLine(formParsTypeleft); :}
			|
			(OneFormPars) Type:formParsType IDENT:formParsIdent VarSquares:V1 FormParsMultiple:F2 SEMI {: RESULT=new OneFormPars(formParsType, formParsIdent, V1, F2); RESULT.setLine(formParsTypeleft); :}
			;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;	
			
Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
		   |
		   (UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
		   ;
		   
Unmatched ::= (UnmatchedIf) IF LPAREN Condition:C1 RPAREN Statement:stmt {: RESULT=new UnmatchedIf(C1, stmt); RESULT.setLine(C1left); :}
		 	|
		 	(UnmatchedIfElse) IF LPAREN Condition:C1 RPAREN Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedIfElse(C1, M2, U3); RESULT.setLine(C1left); :}
		 	;		   

Matched ::= (DesStatement) DesignatorStatement:D1 SEMI {: RESULT=new DesStatement(D1); RESULT.setLine(D1left); :}
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
		   |
		   (WhileCondition) WHILE LPAREN Condition:C1 RPAREN Statement:stm {: RESULT=new WhileCondition(C1, stm); RESULT.setLine(C1left); :}
		   |
		   (BreakCondition) BREAK SEMI {: RESULT=new BreakCondition(); :}
		   |
		   (ContinueCondition) CONTINUE SEMI {: RESULT=new ContinueCondition(); :}
		   |
		   (ReturnNothing) RETURN SEMI {: RESULT=new ReturnNothing(); :}
		   |
		   (ReturnCondition) RETURN Expr:t SEMI {: RESULT=new ReturnCondition(t); RESULT.setLine(tleft); :}
		   |
		   (ReadCondition) READ LPAREN Designator:d RPAREN SEMI {: RESULT=new ReadCondition(d); RESULT.setLine(dleft); :}
		   |
		   (PrintCondition) PRINT LPAREN Expr:e RPAREN SEMI {: RESULT=new PrintCondition(e); RESULT.setLine(eleft); :}
		   |
		   (MorePrintCondition) PRINT LPAREN Expr:e COMMA NUMBER:N1 RPAREN SEMI {: RESULT=new MorePrintCondition(e, N1); RESULT.setLine(eleft); :}
		   |
		   (StatementCondition) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementCondition(S1); RESULT.setLine(S1left); :}
		   |
		   (MatchedStatement) IF LPAREN Condition:C1 RPAREN Matched:M2 ELSE Matched:M3 {: RESULT=new MatchedStatement(C1, M2, M3); RESULT.setLine(C1left); :} 
		   ;

DesignatorStatement ::= (DesignatorParsStmt) Designator:D1 LPAREN DesiActPars:D2 RPAREN {: RESULT=new DesignatorParsStmt(D1, D2); RESULT.setLine(D1left); :}
					|
					(DesignatorAssign) Designator:d Assignop:A1 Expr:e {: RESULT=new DesignatorAssign(d, A1, e); RESULT.setLine(dleft); :}
					|
					(DesignatorInc) Designator:d INC {: RESULT=new DesignatorInc(d); RESULT.setLine(dleft); :}
					|
					(DesignatorDec) Designator:d DEC {: RESULT=new DesignatorDec(d); RESULT.setLine(dleft); :}
					|
					(DesignatorSquareStmt) LSQUARES DesignatorNot:desiFirst RSQUARES EQUAL Designator:desiSecond {: RESULT=new DesignatorSquareStmt(desiFirst, desiSecond); RESULT.setLine(desiFirstleft); :}
					|
					(MoreDesignatorSquare) LSQUARES DesignatorNot:desiFirst DesignatorStmtMore:D1 RSQUARES EQUAL Designator:desiSecond {: RESULT=new MoreDesignatorSquare(desiFirst, D1, desiSecond); RESULT.setLine(desiFirstleft); :}
					;
					
DesignatorStmtMore ::= (OneDesStmt) COMMA DesignatorNot:d {: RESULT=new OneDesStmt(d); RESULT.setLine(dleft); :}
					|
					(MoreDesStmt) DesignatorStmtMore:desiFirst COMMA DesignatorNot:desiSecond {: RESULT=new MoreDesStmt(desiFirst, desiSecond); RESULT.setLine(desiFirstleft); :}
					; 					
					
DesignatorNot ::= (DesignatorYes) Designator:d {: RESULT=new DesignatorYes(d); RESULT.setLine(dleft); :}
				|
				(DesignatorNo) {: RESULT=new DesignatorNo(); :} /* epsilon */
				;

DesiActPars ::= (DesiActPar) ActPars:A1 {: RESULT=new DesiActPar(A1); RESULT.setLine(A1left); :}
			|
			(NoDesiAct) {: RESULT=new NoDesiAct(); :} /* epsilon */
			;

ActPars ::= (OneExprActPars) Expr:E1 {: RESULT=new OneExprActPars(E1); RESULT.setLine(E1left); :}
		|
		(MoreExprActPars) Expr:E1 ActParsMore:A2 {: RESULT=new MoreExprActPars(E1, A2); RESULT.setLine(E1left); :}
		;
		
ActParsMore ::= (OneActParsMore) COMMA Expr:E1 {: RESULT=new OneActParsMore(E1); RESULT.setLine(E1left); :}
			|
			(MoreActParsMore) ActParsMore:A1 COMMA Expr:E2 {: RESULT=new MoreActParsMore(A1, E2); RESULT.setLine(A1left); :}
			;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

Condition ::= (OneConditon) CondTerm:C1 {: RESULT=new OneConditon(C1); RESULT.setLine(C1left); :}
			|
			(MoreConditions) CondTerm:C1 ConditionMore:C2 {: RESULT=new MoreConditions(C1, C2); RESULT.setLine(C1left); :}
			;

ConditionMore ::= (OneMoreCondition) OR CondTerm:C1 {: RESULT=new OneMoreCondition(C1); RESULT.setLine(C1left); :}
				|
				(MoreConditionMore) ConditionMore:C1 OR CondTerm:C2 {: RESULT=new MoreConditionMore(C1, C2); RESULT.setLine(C1left); :}
				;
				
CondTerm ::= (OneCondFact) CondFact:C1 {: RESULT=new OneCondFact(C1); RESULT.setLine(C1left); :}
			|
			(MoreCondFact) CondFact:C1 CondFactMore:C2 {: RESULT=new MoreCondFact(C1, C2); RESULT.setLine(C1left); :}
			;
			
CondFactMore ::= (OneCondFactMore) AND CondFact:C1 {: RESULT=new OneCondFactMore(C1); RESULT.setLine(C1left); :}
			|
			(MoreCondFactMore) CondFactMore:C1 AND CondFact:C2 {: RESULT=new MoreCondFactMore(C1, C2); RESULT.setLine(C1left); :}
			;

CondFact ::= (CondFactExpr) Expr:E1 {: RESULT=new CondFactExpr(E1); RESULT.setLine(E1left); :}
		|
		(CondFactRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactRelop(E1, R2, E3); RESULT.setLine(E1left); :}
		;
		
Expr ::= (PositiveExpr) AddopTermList:exprName {: RESULT=new PositiveExpr(exprName); RESULT.setLine(exprNameleft); :}
		|
		(NegativeExpr) MINUS AddopTermList:exprName {: RESULT=new NegativeExpr(exprName); RESULT.setLine(exprNameleft); :}
		;		
		
AddopTermList ::= (FirstExpr) Term:termName {: RESULT=new FirstExpr(termName); RESULT.setLine(termNameleft); :}
			|
			(NextExpr) AddopTermList:exprName Addop:A1 Term:termName {: RESULT=new NextExpr(exprName, A1, termName); RESULT.setLine(exprNameleft); :}
			;		

Term ::= (TermOne) Factor:factor {: RESULT=new TermOne(factor); RESULT.setLine(factorleft); :}
		|
		(TermMore) Term:termName Mulop:M1 Factor:factorName {: RESULT=new TermMore(termName, M1, factorName); RESULT.setLine(termNameleft); :}
		;

Factor ::= (FactorDesAct) Designator:func LPAREN DesiActPars:D1 RPAREN {: RESULT=new FactorDesAct(func, D1); RESULT.setLine(funcleft); :}
		|
		(FactorDesNoAct) Designator:d {: RESULT=new FactorDesNoAct(d); RESULT.setLine(dleft); :}
		|
		(FactorNumber) NUMBER:N1 {: RESULT=new FactorNumber(N1); RESULT.setLine(N1left); :}
		|
		(FactorChar) CHAR:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
		|
		(FactorBool) BOOL:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :}
		|
		(FactorExpr) LPAREN Expr:e RPAREN {: RESULT=new FactorExpr(e); RESULT.setLine(eleft); :}
		|
		(FactorNewTypeExpr) NEW Type:arrType LSQUARES Expr:e RSQUARES {: RESULT=new FactorNewTypeExpr(arrType, e); RESULT.setLine(arrTypeleft); :}
		|
		(FactorNewTypeActPars) NEW Type:T1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorNewTypeActPars(T1, A2); RESULT.setLine(T1left); :}
		|
		(FactorNewTypeNoAct) NEW Type:T1 LPAREN RPAREN {: RESULT=new FactorNewTypeNoAct(T1); RESULT.setLine(T1left); :}
		;
				 	
		
Designator ::= (OneDesignatorIdent) IDENT:designatorName {: RESULT=new OneDesignatorIdent(designatorName); RESULT.setLine(designatorNameleft); :}
			|
			(DesignatorWithExpr) Designator:d LSQUARES Expr:e RSQUARES {: RESULT=new DesignatorWithExpr(d, e); RESULT.setLine(dleft); :}
			|
			(DesignatorWithIdent) Designator:D1 DOT IDENT:designatorName {: RESULT=new DesignatorWithIdent(D1, designatorName); RESULT.setLine(D1left); :}
			;
Label ::= (LabelItem) IDENT:labelName {: RESULT=new LabelItem(labelName); RESULT.setLine(labelNameleft); :};
		   
Assignop ::= (AssignopItem) EQUAL {: RESULT=new AssignopItem(); :};

Relop ::= (Ifequal) IFEQUAL {: RESULT=new Ifequal(); :}
		|
		(Notequal) NOTEQUAL {: RESULT=new Notequal(); :}
		|
		(Greater) GREATER {: RESULT=new Greater(); :}
		|
		(Less) LESS {: RESULT=new Less(); :}
		|
		(Greaterequal) GREATEREQUAL {: RESULT=new Greaterequal(); :}
		|
		(Lessequal) LESSEQUAL {: RESULT=new Lessequal(); :}
		;
		
Addop ::= (AddopItem) PLUS {: RESULT=new AddopItem(); :}
		|
		(Subop) MINUS {: RESULT=new Subop(); :}
		;
		
Mulop ::= (MulopItem) MUL {: RESULT=new MulopItem(); :}
		|
		(Divop) DIV {: RESULT=new Divop(); :}
		|
		(Modop) PERCENT {: RESULT=new Modop(); :}
		;							